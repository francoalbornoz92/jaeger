// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api_v2.proto

/*
	Package api_v2 is a generated protocol buffer package.

	It is generated from these files:
		api_v2.proto

	It has these top-level messages:
		PostSpansRequest
		PostSpansResponse
		GetTraceRequest
		GetTraceResponse
*/
package api_v2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import jaeger_api_v2 "github.com/jaegertracing/jaeger/model"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PostSpansRequest struct {
	Batch *jaeger_api_v2.Batch `protobuf:"bytes,1,opt,name=batch" json:"batch,omitempty"`
}

func (m *PostSpansRequest) Reset()                    { *m = PostSpansRequest{} }
func (m *PostSpansRequest) String() string            { return proto.CompactTextString(m) }
func (*PostSpansRequest) ProtoMessage()               {}
func (*PostSpansRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{0} }

func (m *PostSpansRequest) GetBatch() *jaeger_api_v2.Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type PostSpansResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *PostSpansResponse) Reset()                    { *m = PostSpansResponse{} }
func (m *PostSpansResponse) String() string            { return proto.CompactTextString(m) }
func (*PostSpansResponse) ProtoMessage()               {}
func (*PostSpansResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{1} }

func (m *PostSpansResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type GetTraceRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetTraceRequest) Reset()                    { *m = GetTraceRequest{} }
func (m *GetTraceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTraceRequest) ProtoMessage()               {}
func (*GetTraceRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{2} }

func (m *GetTraceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetTraceResponse struct {
	Trace *jaeger_api_v2.Trace `protobuf:"bytes,1,opt,name=trace" json:"trace,omitempty"`
}

func (m *GetTraceResponse) Reset()                    { *m = GetTraceResponse{} }
func (m *GetTraceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTraceResponse) ProtoMessage()               {}
func (*GetTraceResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{3} }

func (m *GetTraceResponse) GetTrace() *jaeger_api_v2.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func init() {
	proto.RegisterType((*PostSpansRequest)(nil), "jaeger.api_v2.PostSpansRequest")
	proto.RegisterType((*PostSpansResponse)(nil), "jaeger.api_v2.PostSpansResponse")
	proto.RegisterType((*GetTraceRequest)(nil), "jaeger.api_v2.GetTraceRequest")
	proto.RegisterType((*GetTraceResponse)(nil), "jaeger.api_v2.GetTraceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectorService service

type CollectorServiceClient interface {
	PostSpans(ctx context.Context, in *PostSpansRequest, opts ...grpc.CallOption) (*PostSpansResponse, error)
}

type collectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCollectorServiceClient(cc *grpc.ClientConn) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) PostSpans(ctx context.Context, in *PostSpansRequest, opts ...grpc.CallOption) (*PostSpansResponse, error) {
	out := new(PostSpansResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.CollectorService/PostSpans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CollectorService service

type CollectorServiceServer interface {
	PostSpans(context.Context, *PostSpansRequest) (*PostSpansResponse, error)
}

func RegisterCollectorServiceServer(s *grpc.Server, srv CollectorServiceServer) {
	s.RegisterService(&_CollectorService_serviceDesc, srv)
}

func _CollectorService_PostSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSpansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).PostSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.CollectorService/PostSpans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).PostSpans(ctx, req.(*PostSpansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.api_v2.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSpans",
			Handler:    _CollectorService_PostSpans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_v2.proto",
}

// Client API for QueryService service

type QueryServiceClient interface {
	GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error)
}

type queryServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueryServiceClient(cc *grpc.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error) {
	out := new(GetTraceResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.QueryService/GetTrace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QueryService service

type QueryServiceServer interface {
	GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error)
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_GetTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.QueryService/GetTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTrace(ctx, req.(*GetTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.api_v2.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrace",
			Handler:    _QueryService_GetTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_v2.proto",
}

func init() { proto.RegisterFile("api_v2.proto", fileDescriptorApiV2) }

var fileDescriptorApiV2 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0xae, 0xd3, 0x30,
	0x10, 0x85, 0x95, 0xa0, 0x5e, 0xdd, 0xeb, 0xfe, 0x50, 0x4c, 0x11, 0x55, 0x40, 0xb4, 0x84, 0x05,
	0x28, 0xa2, 0x31, 0x04, 0xb1, 0xe9, 0x02, 0xa9, 0x65, 0x81, 0x60, 0x55, 0x52, 0x56, 0x6c, 0x90,
	0x9b, 0x18, 0xc7, 0x34, 0xcd, 0x04, 0xdb, 0x2d, 0x20, 0x60, 0xc3, 0x23, 0xc0, 0xa3, 0xf1, 0x0a,
	0x3c, 0x08, 0x8a, 0x9d, 0x52, 0x9a, 0xab, 0xae, 0xec, 0xcc, 0xf9, 0x66, 0xce, 0x19, 0x2b, 0xa8,
	0x43, 0x4b, 0xf1, 0x6e, 0x17, 0x85, 0xa5, 0x04, 0x0d, 0xb8, 0xfb, 0x81, 0x32, 0xce, 0x64, 0x68,
	0x8b, 0x5e, 0x7b, 0x03, 0x29, 0xcb, 0xad, 0xe6, 0x0d, 0x38, 0x70, 0x30, 0x57, 0x52, 0xdd, 0xea,
	0xea, 0x6d, 0x0e, 0xc0, 0x73, 0x46, 0x68, 0x29, 0x08, 0x2d, 0x0a, 0xd0, 0x54, 0x0b, 0x28, 0x54,
	0xad, 0x3e, 0x34, 0x47, 0x32, 0xe1, 0xac, 0x98, 0xa8, 0x4f, 0x94, 0x73, 0x26, 0x09, 0x94, 0x86,
	0xb8, 0x4c, 0xfb, 0xcf, 0x50, 0x7f, 0x01, 0x4a, 0x2f, 0x4b, 0x5a, 0xa8, 0x98, 0x7d, 0xdc, 0x32,
	0xa5, 0x71, 0x80, 0x5a, 0x2b, 0xaa, 0x93, 0x6c, 0xe8, 0x8c, 0x9d, 0x07, 0xed, 0x68, 0x10, 0x1e,
	0x25, 0x0c, 0xe7, 0x95, 0x16, 0x5b, 0xc4, 0xbf, 0x87, 0xae, 0xfd, 0xd7, 0xaf, 0x4a, 0x28, 0x14,
	0xc3, 0x3d, 0xe4, 0xc2, 0xda, 0x74, 0x9f, 0xc7, 0x2e, 0xac, 0xfd, 0xbb, 0xe8, 0xea, 0x0b, 0xa6,
	0xdf, 0x48, 0x9a, 0xb0, 0xbd, 0x47, 0x0f, 0xb9, 0x22, 0x35, 0xc8, 0x45, 0xec, 0x8a, 0xb4, 0xca,
	0x71, 0x40, 0xea, 0x31, 0x01, 0x6a, 0xe9, 0xaa, 0x70, 0x22, 0x87, 0x85, 0x2d, 0x12, 0x7d, 0x43,
	0xfd, 0xe7, 0x90, 0xe7, 0x2c, 0xd1, 0x20, 0x97, 0x4c, 0xee, 0x44, 0xc2, 0x70, 0x86, 0x2e, 0xfe,
	0x65, 0xc3, 0xa3, 0x46, 0x77, 0x73, 0x6b, 0x6f, 0x7c, 0x1a, 0xb0, 0x79, 0xfc, 0xe1, 0x8f, 0xdf,
	0x7f, 0x7e, 0xb9, 0xd8, 0xef, 0x9a, 0x97, 0xdf, 0x45, 0x44, 0x55, 0xf2, 0xd4, 0x09, 0xa2, 0xcf,
	0xa8, 0xf3, 0x7a, 0xcb, 0xe4, 0x97, 0x83, 0xf3, 0xf9, 0x7e, 0x1b, 0x7c, 0xa7, 0x31, 0xb7, 0xf1,
	0x12, 0xde, 0xe8, 0xa4, 0x5e, 0xdb, 0xde, 0x32, 0xb6, 0x37, 0xf0, 0xf5, 0xbd, 0xad, 0xd9, 0x58,
	0x91, 0xaf, 0x22, 0xfd, 0x3e, 0x7f, 0xff, 0x73, 0x36, 0xc7, 0xad, 0xe8, 0xca, 0xe3, 0xf0, 0x51,
	0xe0, 0x3a, 0xae, 0x7c, 0x8a, 0xd0, 0x2b, 0x33, 0x6e, 0x3c, 0x5b, 0xbc, 0xc4, 0xf7, 0x33, 0xad,
	0x4b, 0x35, 0x25, 0x84, 0x0b, 0x9d, 0x6d, 0x57, 0x61, 0x02, 0x1b, 0x62, 0xdd, 0xaa, 0x19, 0xa2,
	0xe0, 0xf5, 0x17, 0xba, 0x29, 0x20, 0x3c, 0x12, 0xea, 0x34, 0x6f, 0xcf, 0xec, 0xb9, 0x3a, 0x33,
	0xbf, 0xcb, 0x93, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0x68, 0x0e, 0x42, 0xbc, 0x02, 0x00,
	0x00,
}
